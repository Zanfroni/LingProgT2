/**
 * generated by Xtext 2.14.0
 */
package org.example.domainmodel.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.example.domainmodel.domainmodel.Domainmodel;
import org.example.domainmodel.tests.DomainmodelInjectorProvider;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(DomainmodelInjectorProvider.class)
@SuppressWarnings("all")
public class DomainmodelParsingTest {
  @Inject
  private ParseHelper<Domainmodel> parseHelper;
  
  @Test
  public void simpleTest() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("datatype varchar");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity pessoa{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("NOT NULL nome : varchar PRIMARY KEY");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Domainmodel result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assert.assertTrue(_builder_1.toString(), errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void table1Test() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("datatype varchar");
      _builder.newLine();
      _builder.append("datatype integer");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity pessoa{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("NOT NULL nome : varchar PRIMARY KEY");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("NULL idade : integer");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Domainmodel result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assert.assertTrue(_builder_1.toString(), errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void inheritanceTest() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("datatype varchar");
      _builder.newLine();
      _builder.append("datatype integer");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity turma{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("NOT NULL id : integer PRIMARY KEY");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity pessoa extends turma{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("NOT NULL nome : varchar PRIMARY KEY");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("NULL idade : integer");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Domainmodel result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assert.assertTrue(_builder_1.toString(), errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void advancedExampleTest() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("datatype varchar");
      _builder.newLine();
      _builder.append("datatype integer");
      _builder.newLine();
      _builder.append("datatype date");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity turma{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("NOT NULL id : integer PRIMARY KEY");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("NULL data : date");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity pessoa extends turma{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("NOT NULL nome : varchar PRIMARY KEY");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("NULL idade : integer");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("NOT NULL cadastro : varchar FOREIGN KEY");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Domainmodel result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assert.assertTrue(_builder_1.toString(), errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
